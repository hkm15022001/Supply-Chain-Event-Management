version: '3'

networks:
  scem-net:
   driver: bridge
   ipam:
     config:
       - subnet: "172.20.0.0/16" # Định nghĩa dải địa chỉ IP cho mạng
volumes:
  redis-data:
  postgres-data:
  golangscem-data:
  zeebe:
  elastic:


services:
  gorush:
    container_name: gorush_docker
    image: appleboy/gorush
    restart: always
    ports:
      - "7088:8088"
      - "7000:9000"
    logging:
      options:
        max-size: "100k"
        max-file: "3"
    environment:
      - GORUSH_CORE_QUEUE_NUM=512
      - GORUSH_GRPC_ENABLED=true
      - GORUSH_ANDROID_ENABLED=true
      - GORUSH_ANDROID_APIKEY=<input from google fcm>
    networks:
      - scem-net
  redis:
    container_name: redis_docker
    image: redis:6.2-rc1-alpine
    restart: always
    command: ["redis-server", "--appendonly", "yes","--port", "6379"]
    hostname: redis
    ports:
      - "6379:6379"
    networks:
      - scem-net
    volumes:
      - redis-data:/data
    user: root
  postgres:
    container_name: scem_postgres_docker
    image: postgres:13.1-alpine
    restart: always
    hostname: postgres
    ports:
      - "5432:5432"
    env_file:
      - ./docker/scem_database.env # configure postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    networks:
      - scem-net
  golang_scem:
    container_name: golang_scem_docker
    # build: .
    image: golang_scem:v1
    restart: always
    volumes:
      - golangscem-data:/storage
      - golangscem-data:/db
    depends_on:
      - zeebe
      - postgres
      - redis
    ports:
      - '5000:5000'
      - '5001:5001'
    env_file:
      - ./docker/golang_scem.env # configure postgres
    networks:
      - scem-net

  zeebe: # https://docs.camunda.io/docs/self-managed/platform-deployment/docker/#zeebe
    image: camunda/zeebe:${CAMUNDA_PLATFORM_VERSION}
    container_name: zeebe
    ports:
      - "26500:26500"
      - "9600:9600"
    environment: # https://docs.camunda.io/docs/self-managed/zeebe-deployment/configuration/environment-variables/
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=http://elasticsearch:9200
      # default is 1000, see here: https://github.com/camunda/zeebe/blob/main/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchExporterConfiguration.java#L259
      - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE=1
      # allow running with low disk space
      - ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK=0.998
      - ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK=0.999
      - "JAVA_TOOL_OPTIONS=-Xms512m -Xmx512m"
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9600' || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5
      # start_period: 30s
    volumes:
      - zeebe:/usr/local/zeebe/data
    networks:
      - scem-net
    depends_on:
      - elasticsearch

  operate: # https://docs.camunda.io/docs/self-managed/platform-deployment/docker/#operate
    image: camunda/operate:${CAMUNDA_PLATFORM_VERSION}
    container_name: operate
    ports:
      - "8081:8080"
    environment: # https://docs.camunda.io/docs/self-managed/operate-deployment/configuration/
      - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
      - CAMUNDA_OPERATE_ELASTICSEARCH_URL=http://elasticsearch:9200
      - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
      - management.endpoints.web.exposure.include=health
      - management.endpoint.health.probes.enabled=true
    healthcheck:
      test: [ "CMD-SHELL", "wget -O - -q 'http://localhost:8080/actuator/health/readiness'" ]
      interval: 30s
      timeout: 1s
      retries: 5
      # start_period: 30s
    networks:
      - scem-net
    depends_on:
      - zeebe
      - elasticsearch

  elasticsearch: # https://hub.docker.com/_/elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      # allow running with low disk space
      - cluster.routing.allocation.disk.threshold_enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green" ]
      interval: 30s
      timeout: 5s
      retries: 3
    volumes:
      - elastic:/usr/share/elasticsearch/data
    networks:
      - scem-net
