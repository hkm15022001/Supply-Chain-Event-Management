// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: longship.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LongShip_CreateLongShipFromVRP_FullMethodName = "/Ship.LongShip/CreateLongShipFromVRP"
)

// LongShipClient is the client API for LongShip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LongShipClient interface {
	CreateLongShipFromVRP(ctx context.Context, in *PackageListResult, opts ...grpc.CallOption) (*LongShipResponse, error)
}

type longShipClient struct {
	cc grpc.ClientConnInterface
}

func NewLongShipClient(cc grpc.ClientConnInterface) LongShipClient {
	return &longShipClient{cc}
}

func (c *longShipClient) CreateLongShipFromVRP(ctx context.Context, in *PackageListResult, opts ...grpc.CallOption) (*LongShipResponse, error) {
	out := new(LongShipResponse)
	err := c.cc.Invoke(ctx, LongShip_CreateLongShipFromVRP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LongShipServer is the server API for LongShip service.
// All implementations must embed UnimplementedLongShipServer
// for forward compatibility
type LongShipServer interface {
	CreateLongShipFromVRP(context.Context, *PackageListResult) (*LongShipResponse, error)
	mustEmbedUnimplementedLongShipServer()
}

// UnimplementedLongShipServer must be embedded to have forward compatible implementations.
type UnimplementedLongShipServer struct {
}

func (UnimplementedLongShipServer) CreateLongShipFromVRP(context.Context, *PackageListResult) (*LongShipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLongShipFromVRP not implemented")
}
func (UnimplementedLongShipServer) mustEmbedUnimplementedLongShipServer() {}

// UnsafeLongShipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LongShipServer will
// result in compilation errors.
type UnsafeLongShipServer interface {
	mustEmbedUnimplementedLongShipServer()
}

func RegisterLongShipServer(s grpc.ServiceRegistrar, srv LongShipServer) {
	s.RegisterService(&LongShip_ServiceDesc, srv)
}

func _LongShip_CreateLongShipFromVRP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageListResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LongShipServer).CreateLongShipFromVRP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LongShip_CreateLongShipFromVRP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LongShipServer).CreateLongShipFromVRP(ctx, req.(*PackageListResult))
	}
	return interceptor(ctx, in, info, handler)
}

// LongShip_ServiceDesc is the grpc.ServiceDesc for LongShip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LongShip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ship.LongShip",
	HandlerType: (*LongShipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLongShipFromVRP",
			Handler:    _LongShip_CreateLongShipFromVRP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "longship.proto",
}
